{"version":3,"sources":["serviceWorker.js","redux/actions/announcement.js","redux/actions.js","shared/input.jsx","components/announcement/index.jsx","constants/routes.js","components/announcement/form-announcements.jsx","components/announcement/announcement.js","App.js","redux/reducers/announcement.js","redux/store.js","index.js"],"names":["Boolean","window","location","hostname","match","getEditPostAction","post","type","payload","RenderInput","input","className","pattern","placeholder","required","FormControl","TextField","label","variant","mapDispatchToProps","removePostAction","withRouter","connect","announcement","reduxForm","form","history","useState","search","setSearch","result","posts","filter","el","title","includes","description","Button","size","color","onClick","push","Field","name","component","renderInput","onChange","e","target","value","length","map","item","index","key","id","date","startIcon","handleSubmit","action","onSubmit","getAnnouncementAction","getUpdatePostAction","reset","initialValues","edit_post","moment","Date","calendar","toString","exact","path","AnnouncementCard","AnnouncementForm","INIT_STATE","reducer","combineReducers","reduxFormReducer","state","findIndex","splice","store","createStore","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6d84c030.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n    GET_ANNOUNCEMENT,\r\n    GET_EDIT_POST,\r\n    GET_UPDATE_POST,\r\n    REMOVE_POST\r\n} from \"../actions\";\r\n\r\nexport const getAnnouncementAction = post => ({\r\n    type: GET_ANNOUNCEMENT,\r\n    payload: post,\r\n});\r\nexport const getEditPostAction = (post) => ({\r\n    type: GET_EDIT_POST,\r\n    payload: post,\r\n});\r\nexport const getUpdatePostAction = (post) => ({\r\n    type: GET_UPDATE_POST,\r\n    payload: post,\r\n});\r\nexport const removePostAction = (post) => ({\r\n    type: REMOVE_POST,\r\n    payload: post,\r\n});\r\n","export const GET_ANNOUNCEMENT = \"GET_ANNOUNCEMENT\";\r\nexport const GET_EDIT_POST = \"GET_EDIT_POST\";\r\nexport const GET_UPDATE_POST = \"GET_UPDATE_POST\";\r\nexport const REMOVE_POST = \"REMOVE_POST\";\r\n","import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControl from '@material-ui/core/FormControl';\r\n\r\n\r\n\r\nconst RenderInput = ({input, type, className, pattern, placeholder, required})=>{\r\n\r\n\r\n    return(\r\n        <FormControl>\r\n            <TextField className={className} required={required}  {...input} pattern={pattern} type={type}  label={placeholder} variant=\"outlined\" />\r\n        </FormControl>\r\n    )\r\n};\r\nexport default RenderInput;","import React, {useState} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {FORM_ANNOUNCEMENT} from \"../../constants/routes\"\r\nimport {getEditPostAction, removePostAction} from \"../../redux/actions/announcement\"\r\nimport {withRouter} from 'react-router-dom';\r\nimport renderInput from \"../../shared/input\"\r\nimport {Field, reduxForm} from 'redux-form';\r\nimport Button from '@material-ui/core/Button';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\n\r\n\r\nconst AnnouncementCard = ({announcement, getEditPostAction, removePostAction, history}) => {\r\n    const [search, setSearch] = useState('');\r\n    const result = announcement && announcement.posts && announcement.posts.filter(el => el && el.title ? el.title.includes(search) || el.description.includes(search) : \"\");\r\n\r\n    const funcEditPost = (post) => {\r\n        getEditPostAction(post);\r\n        history.push(FORM_ANNOUNCEMENT)\r\n    };\r\n\r\n    return (\r\n        <>\r\n        <div className=\"box-header\">\r\n            <Button size=\"medium\" color=\"primary\" className=\"btn-create\" variant=\"contained\" onClick={() => history.push(FORM_ANNOUNCEMENT)}>Create card</Button>\r\n            <Field\r\n                name=\"search\"\r\n                placeholder=\"Search\"\r\n                component={renderInput}\r\n                onChange={(e) => setSearch(e.target.value)}/>\r\n        </div>\r\n        { result && result.length > 0 ?\r\n            <div>\r\n                {result.map((item, index) => (\r\n                    <div className=\"card\" key={item.id}>\r\n                        <div className=\"top-box\">\r\n                            <h3>{item.title}</h3>\r\n                            <p>{item.date}</p>\r\n                        </div>\r\n                        <p className=\"description\">{item.description}</p>\r\n\r\n                        <div className=\"box-buttons\">\r\n                            <Button size=\"small\" startIcon={<EditIcon />} variant=\"contained\" color=\"primary\"\r\n                                    onClick={() => funcEditPost(item)}>Edit post</Button>\r\n                            <Button size=\"small\" startIcon={<DeleteIcon />} variant=\"contained\" color=\"secondary\"\r\n                                    onClick={() => removePostAction(item)}>Delete</Button>\r\n                        </div>\r\n\r\n                    </div>\r\n                )) }\r\n            </div>:\r\n            <div  className=\"not-found\">\r\n                <h2 >Nothing Found</h2>\r\n            </div>\r\n\r\n        }\r\n        </>\r\n    )\r\n};\r\nconst mapDispatchToProps = {\r\n    getEditPostAction,\r\n    removePostAction\r\n};\r\n\r\nfunction mapStateToProps({announcement}) {\r\n    return {\r\n        announcement,\r\n    };\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(reduxForm({\r\n    form: 'search_announcement'\r\n})(AnnouncementCard)));\r\n","export const ROOT = \"/\";\r\nexport const FORM_ANNOUNCEMENT = \"/announcement-form\";\r\n","import React from \"react\";\r\nimport {Field, reduxForm} from 'redux-form';\r\nimport renderInput from \"../../shared/input\"\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst FormAnnouncement = ({handleSubmit, post}) => {\r\n\r\n    return (\r\n        <>\r\n        <form action=\"form\" onSubmit={handleSubmit} className=\"form\">\r\n            {post ?\r\n                <h1>Edit Announcement</h1> :\r\n                <h1>Add Announcement</h1>\r\n            }\r\n            <Field\r\n                name=\"title\"\r\n                component={renderInput}\r\n                required\r\n                placeholder=\"title\"\r\n            />\r\n            <Field\r\n                name=\"description\"\r\n                component={renderInput}\r\n                required\r\n                placeholder=\"description\"\r\n                className=\"inp-description\"\r\n\r\n\r\n            />\r\n            <div className=\"box-buttons\">\r\n                <Button\r\n                    size=\"medium\"\r\n                    color=\"primary\"\r\n                    variant=\"contained\"\r\n                    type=\"submit\"\r\n                >{post ? \"Save\" : \"Create\"}</Button>\r\n            </div>\r\n        </form>\r\n        </>\r\n    )\r\n};\r\nexport default reduxForm({\r\n    form: 'form_announcement'\r\n})(FormAnnouncement);","import React from \"react\";\r\nimport FormAnnouncement from \"./form-announcements\";\r\nimport {connect} from \"react-redux\";\r\nimport {ROOT} from \"../../constants/routes\"\r\nimport {getAnnouncementAction, getEditPostAction, getUpdatePostAction} from \"../../redux/actions/announcement\"\r\nimport {reset} from 'redux-form';\r\nimport {withRouter} from 'react-router-dom';\r\nimport moment from \"moment\";\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst Announcement = ({getAnnouncementAction, getEditPostAction, getUpdatePostAction, reset, history, announcement}) => {\r\n\r\n    const funcCreatePost = (post) => {\r\n        post.id = `f${(+new Date).toString(16)}`;\r\n        post.date = moment(new Date()).calendar();\r\n        getAnnouncementAction(post);\r\n        reset(\"form_announcement\");\r\n        history.push(ROOT)\r\n    };\r\n    const funcEditPost = (post) => {\r\n        post.date = moment(new Date()).calendar();\r\n        getUpdatePostAction(post);\r\n        reset(\"form_announcement\");\r\n        history.push(ROOT);\r\n        getEditPostAction(null);\r\n    };\r\n\r\n\r\n    return (\r\n        <div className=\"container-form\">\r\n        <Button size=\"medium\" color=\"primary\" className=\"btn-back\" variant=\"contained\" onClick={()=> history.push(ROOT)}>Go to back</Button>\r\n\r\n        <FormAnnouncement\r\n            initialValues={announcement.edit_post}\r\n            onSubmit={announcement.edit_post ? funcEditPost : funcCreatePost}\r\n            post={announcement.edit_post}\r\n        />\r\n        </div>\r\n    )\r\n};\r\nfunction mapStateToProps({announcement}) {\r\n    return {\r\n        announcement,\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    getAnnouncementAction,\r\n    getEditPostAction,\r\n    getUpdatePostAction,\r\n    reset\r\n};\r\n\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Announcement));","import React from 'react';\nimport \"./scss/app.scss\";\nimport AnnouncementCard from './components/announcement/index';\nimport AnnouncementForm from \"./components/announcement/announcement\"\nimport {Route, Switch, withRouter,} from 'react-router-dom';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Switch>\n            <Route exact path=\"/\" component={AnnouncementCard}/>\n            <Route exact path=\"/announcement-form\" component={AnnouncementForm}/>\n\n        </Switch>\n    </div>\n  );\n}\n\nexport default withRouter (App);\n","import {GET_ANNOUNCEMENT, GET_EDIT_POST, GET_UPDATE_POST, REMOVE_POST} from \"../actions\";\r\n\r\nconst INIT_STATE = {\r\n   posts: [],\r\n    edit_post: null\r\n};\r\n\r\nexport default (state = INIT_STATE, action) => {\r\n    switch (action.type) {\r\n        case GET_ANNOUNCEMENT:\r\n            return {...state, posts: [...state.posts, action.payload]};\r\n        case GET_EDIT_POST:\r\n            return {...state, edit_post: action.payload};\r\n        case GET_UPDATE_POST:\r\n            const index = state.posts.findIndex(\r\n                item => item.id === action.payload.id\r\n            );\r\n            state.posts.splice(index, 1, action.payload);\r\n            return { ...state, posts: [...state.posts] };\r\n        case REMOVE_POST:\r\n            return {\r\n                ...state, posts: [...state.posts.filter(item => item.id !== action.payload.id)]\r\n            };\r\n        default:\r\n            return {...state};\r\n    }\r\n}\r\n","import {combineReducers, createStore} from 'redux';\r\nimport {reducer as reduxFormReducer} from 'redux-form';\r\nimport {\r\n    announcementReducer\r\n} from './reducers/index';\r\nconst reducer = combineReducers({\r\n    form: reduxFormReducer,\r\n    announcement: announcementReducer\r\n});\r\nconst store = createStore(reducer);\r\n\r\nexport default store;","import React from 'react';\nimport {render} from 'react-dom';\nimport * as serviceWorker from \"./serviceWorker\";\nimport App from './App.js';\nimport {Provider} from 'react-redux';\nimport {HashRouter as Router} from \"react-router-dom\";\nimport store from './redux/store';\n\nrender(\n    <Provider store={store}>\n        <Router>\n            <App/>\n        </Router>\n    </Provider>,\n    document.getElementById('root'),\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}